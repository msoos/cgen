//
//  Boolean Algebra Library (BAL)
//  https://cgen.sophisticatedways.net
//  Copyright Â© 2018-2020 Volodymyr Skladanivskyy. All rights reserved.
//  Published under terms of MIT license.
//

#ifndef cnfaddmap_hpp
#define cnfaddmap_hpp

namespace bal {
    // CNF encodings for various addition operations
    // Non-trivial ones generated using espresso
    // Individual encodings are grouped within the const map
    // to be used for optimized CNF generation
    
    // order of clauses is based on right-to-left
    // literal by literal comparison
    // disregarding signs for clauses of 4 literals and less
    // to match defaut CNF ordering
    // assuming the operand variables are ordered
    // and the new output variables are generated sequentially
    
    // addition of 2 1 bit operands with full carry, without constant
    constexpr size_t ADD_21_FC_SIZE = 10;
    constexpr const char* const ADD_21_FC[ADD_21_FC_SIZE] = {
        "1000-",
        "0010-",
        "1110-",
        "0001-",
        "1101-",
        "0111-",
        "1-1-0",
        "0-0-1",
        "-1-00",
        "-0-11"
    };
    
    // addition of 2 1 bit operands without carry, with constant = 0
    constexpr size_t ADD_21_C0_I0O2_SIZE = 6;
    constexpr const char* const ADD_21_C0_I0O2[ADD_21_C0_I0O2_SIZE] = {
        "110-",
        "101-",
        "011-",
        "-1-0",
        "00-1",
        "--00"
    };
    
    // addition of 2 1 bit operands without carry, with constant = 1
    constexpr size_t ADD_21_C1_I0O2_SIZE = 6;
    constexpr const char* const ADD_21_C1_I0O2[ADD_21_C1_I0O2_SIZE] = {
        "010-",
        "001-",
        "-0-1",
        "11-0",
        "--11",
        "1-00"
    };
    
    // addition of 3 1 bit operands without carry, with constant = 0
    // same as addition of 2 operands + variable carry
    constexpr size_t ADD_31_C0_I0O2_SIZE = ADD_21_FC_SIZE;
    constexpr const char* const * const ADD_31_C0_I0O2 = ADD_21_FC;
    
    // addition of 3 1 bit operands without carry, with constant = 1
    constexpr size_t ADD_31_C1_I0O2_SIZE = 13;
    constexpr const char* const ADD_31_C1_I0O2[ADD_31_C1_I0O2_SIZE] = {
        "0110--",
        "1001--",
        "-01-1-",
        "111-0-",
        "-1-11-",
        "11-00-",
        "1-100-",
        "--001-",
        "000--1",
        "---0-0",
        "00-1-1",
        "0-01-1",
        "----00"
    };
    
    // addition of 3 bits plus a constant 1
    // use 2 x 1st carry instead of 2nd carry
    // the 1st 1st carry is for the first two input bits
    // the 2nd 1st carry is equal to the third input operand since the 4-th one is always 1
    constexpr size_t ADD_31_C1_I0O2xC1_SIZE = 10;
    constexpr const char* const ADD_31_C1_I0O2xC1[ADD_31_C1_I0O2xC1_SIZE] = {
        "0000-",
        "1100-",
        "0110-",
        "1001-",
        "0011-",
        "1111-",
        "-10-0",
        "1--00",
        "-01-1",
        "0--11"
    };
    
    // addition of 3 1 bit operands without carry in, without second carry out,
    // with constant = 1
    constexpr size_t ADD_31_C1_I0O1_SIZE = 11;
    constexpr const char* const ADD_31_C1_I0O1[ADD_31_C1_I0O1_SIZE] = {
        "0110-",
        "1001-",
        "-01-1",
        "000-0",
        "111-0",
        "-1-11",
        "11-00",
        "00-10",
        "--001",
        "1-100",
        "0-010"
    };
    
    // addition of 4 1 bit operands without carry in, with constant = 0
    constexpr size_t ADD_41_C0_I0O2_SIZE = 24;
    constexpr const char* const ADD_41_C0_I0O2[ADD_41_C0_I0O2_SIZE] = {
        "---1--0",
        "0000--1",
        "00-01-1",
        "1--100-",
        "000-1-1",
        "01100--",
        "11--00-",
        "111--0-",
        "-111-0-",
        "01010--",
        "00110--",
        "10001--",
        "11011--",
        "10111--",
        "--00-11",
        "1-1-00-",
        "0-001-1",
        "-1-011-",
        "-010-1-",
        "0--111-",
        "-001-1-",
        "----0-0",
        "-----00",
        "11110--"
    };
    
    // addition of 4 1 bit operands without carry in, with constant = 1
    constexpr size_t ADD_41_C1_I0O2_SIZE = 23;
    constexpr const char* const ADD_41_C1_I0O2[ADD_41_C1_I0O2_SIZE] = {
        "0-00--1",
        "000---1",
        "1111-0-",
        "111-00-",
        "1-1100-",
        "-11100-",
        "11----0",
        "10101--",
        "01101--",
        "10011--",
        "01011--",
        "00100--",
        "--001-1",
        "00--1-1",
        "-000--1",
        "11010--",
        "--11--0",
        "0--101-",
        "10--01-",
        "-1-001-",
        "----111",
        "-----00",
        "00001--"
    };
    
    constexpr size_t ADD_41_C0_I0O1_SIZE = 21;
    constexpr const char* const ADD_41_C0_I0O1[ADD_41_C0_I0O1_SIZE] = {
        "1--100",
        "00-010",
        "0000-0",
        "000-10",
        "111--0",
        "01100-",
        "11--00",
        "-111-0",
        "11011-",
        "10111-",
        "01010-",
        "00110-",
        "10001-",
        "0-0010",
        "-1-011",
        "-010-1",
        "--0001",
        "1-1-00",
        "0--111",
        "-001-1",
        "11110-"
    };
    
    constexpr size_t ADD_41_C1_I0O1_SIZE = 21;
    constexpr const char* const ADD_41_C1_I0O1[ADD_41_C1_I0O1_SIZE] = {
        "111-00",
        "00--10",
        "1-1100",
        "1111-0",
        "10000-",
        "000--0",
        "01011-",
        "--0010",
        "00-0-0",
        "01101-",
        "01110-",
        "10011-",
        "11-100",
        "10101-",
        "-1-001",
        "--0101",
        "0-00-0",
        "-01-01",
        "11--11",
        "--1111",
        "00001-"
    };
    
    // addition of 5 1 bit operands without carry in, with constant = 0
    constexpr size_t ADD_51_C0_I0O2_SIZE = 46;
    constexpr const char* const ADD_51_C0_I0O2[ADD_51_C0_I0O2_SIZE] = {
        "0--001-1",
        "-00-01-1",
        "11--100-",
        "--11100-",
        "0-00-1-1",
        "000--1-1",
        "-000-1-1",
        "-1111-0-",
        "111-1-0-",
        "1-111-0-",
        "0-000--1",
        "00-00--1",
        "11-1-00-",
        "010110--",
        "111--00-",
        "1-11-00-",
        "011010--",
        "100110--",
        "101010--",
        "11-----0",
        "1111--0-",
        "010101--",
        "110001--",
        "001101--",
        "101001--",
        "--00--11",
        "000-0--1",
        "001011--",
        "110111--",
        "1----0-0",
        "-0000--1",
        "-111-00-",
        "0000---1",
        "--01001-",
        "-01-001-",
        "011-0-1-",
        "1--1011-",
        "00--101-",
        "1--0111-",
        "01--111-",
        "-0-1111-",
        "-1---0-0",
        "---00-11",
        "------00",
        "111110--",
        "000001--"
    };
    
    // addition of 5 1 bit operands without carry in, with constant = 1
    constexpr size_t ADD_51_C1_I0O2_SIZE = 47;
    constexpr const char* const ADD_51_C1_I0O2[ADD_51_C1_I0O2_SIZE] = {
        "1111-00-",
        "111-100-",
        "11-1100-",
        "11111-0-",
        "1-11100-",
        "0-00011-",
        "-11-1--0",
        "00000-1-",
        "000-011-",
        "0000-11-",
        "1--11--0",
        "-111100-",
        "-000011-",
        "001001--",
        "0--0000-",
        "0-0-0--1",
        "00--0--1",
        "-00-0--1",
        "-00--1-1",
        "111--11-",
        "11-1-11-",
        "1-01-01-",
        "1-11-11-",
        "010010--",
        "110011--",
        "010111--",
        "101000--",
        "001010--",
        "000110--",
        "101011--",
        "001111--",
        "1--0010-",
        "01--010-",
        "-11--0-0",
        "--00000-",
        "11--001-",
        "1--0101-",
        "-0--01-1",
        "011--01-",
        "-101-01-",
        "-111-11-",
        "-011-01-",
        "---1--00",
        "0--0-1-1",
        "-000---1",
        "--0-01-1",
        "----1-00"
    };
    
    // addition of 5 1 bit operands without carry in, without second carry out,
    // with constant = 0
    constexpr size_t ADD_51_C0_I0O1_SIZE = 43;
    constexpr const char* const ADD_51_C0_I0O1[ADD_51_C0_I0O1_SIZE] = {
        "11--100",
        "--11100",
        "--00010",
        "00--010",
        "-000-10",
        "0-00-10",
        "111-1-0",
        "000--10",
        "1-111-0",
        "-1111-0",
        "111--00",
        "11-1-00",
        "1-11-00",
        "0-000-0",
        "00-00-0",
        "000-0-0",
        "101010-",
        "011010-",
        "100110-",
        "010110-",
        "101001-",
        "011001-",
        "100101-",
        "010101-",
        "1111--0",
        "0000--0",
        "001011-",
        "110111-",
        "1--0001",
        "--01001",
        "-01-001",
        "01--001",
        "--00101",
        "00--101",
        "--11011",
        "11--011",
        "1--0111",
        "01--111",
        "-0-1111",
        "-111-00",
        "-0000-0",
        "111110-",
        "000001-"
    };
    
    // addition of 5 1 bit operands without carry in, without second carry out,
    // with constant = 1
    constexpr size_t ADD_51_C1_I0O1_SIZE = 42;
    constexpr const char* const ADD_51_C1_I0O1[ADD_51_C1_I0O1_SIZE] = {
        "-111100",
        "00000-1",
        "00-0011",
        "1-11100",
        "0-00011",
        "11-1100",
        "11111-0",
        "-000011",
        "0000-11",
        "1111-00",
        "0-010-0",
        "-0010-0",
        "011101-",
        "--10101",
        "11-0-01",
        "000-011",
        "0-0-110",
        "1-01-01",
        "111010-",
        "101101-",
        "010010-",
        "110101-",
        "011011-",
        "1--1111",
        "000110-",
        "001111-",
        "100010-",
        "101011-",
        "110011-",
        "1-1-001",
        "--00000",
        "01-00-0",
        "1--0010",
        "-0100-0",
        "00-10-0",
        "011--01",
        "-011-01",
        "00-01-0",
        "-101-01",
        "111--11",
        "-1-1111",
        "-00-110"
    };
    
    // addition of 6 1 bit operands without carry in, with constant = 0
    constexpr size_t ADD_61_C0_I0O2_SIZE = 88;
    constexpr const char* const ADD_61_C0_I0O2[ADD_61_C0_I0O2_SIZE] = {
        "-0000011-",
        "0-000011-",
        "00-00011-",
        "0000-011-",
        "000-0011-",
        "00000-11-",
        "1111--00-",
        "11-11-00-",
        "11111--0-",
        "-0000---1",
        "00-00---1",
        "11-1-100-",
        "-111-100-",
        "1--11100-",
        "--111100-",
        "1-1111-0-",
        "-11111-0-",
        "-00-0-1-1",
        "000000-1-",
        "--0000--1",
        "1-111-00-",
        "-1111-00-",
        "111--100-",
        "11--1100-",
        "111-11-0-",
        "1010110--",
        "0110110--",
        "1011010--",
        "111-1-00-",
        "1000100--",
        "0100100--",
        "-0-0-01-1",
        "0010100--",
        "1100101--",
        "0110101--",
        "0-00--1-1",
        "0011000--",
        "1101001--",
        "0---001-1",
        "0000----1",
        "1100011--",
        "0101101--",
        "0110011--",
        "0101110--",
        "0011101--",
        "1111011--",
        "1000111--",
        "0010111--",
        "1101111--",
        "000---1-1",
        "0001010--",
        "0101011--",
        "0011011--",
        "11----0-0",
        "-11---0-0",
        "1-1-1---0",
        "1110--11-",
        "10-000-0-",
        "0-1000-0-",
        "01-1-001-",
        "1--10001-",
        "-00-0000-",
        "-0-11001-",
        "1--00101-",
        "1-11-011-",
        "1-0110-1-",
        "--001101-",
        "-1-01111-",
        "0111--11-",
        "-0-10010-",
        "01--0101-",
        "001--101-",
        "101--111-",
        "1-0101-1-",
        "-00111-1-",
        "-00--01-1",
        "000--0--1",
        "0--11111-",
        "0-0-00--1",
        "0-000---1",
        "-0-00-1-1",
        "-----1-00",
        "---0-0-11",
        "---0001-1",
        "-1-----00",
        "1-1---0-0",
        "----1--00",
        "1111110--"
    };
    
    // addition of 6 1 bit operands without carry in, with constant = 1
    constexpr size_t ADD_61_C1_I0O2_SIZE = 88;
    constexpr const char* const ADD_61_C1_I0O2[ADD_61_C1_I0O2_SIZE] = {
        "11111-00-",
        "-00-0---1",
        "1111-100-",
        "111-1100-",
        "1-111100-",
        "11-11100-",
        "111111-0-",
        "00-000-1-",
        "0-0000-1-",
        "000-00-1-",
        "0000-0-1-",
        "00000--1-",
        "000--011-",
        "00-00-11-",
        "1111----0",
        "111-1---0",
        "1-111---0",
        "0-000-11-",
        "000-0-11-",
        "0000--11-",
        "11---10-0",
        "111--1--0",
        "-1111100-",
        "0--00011-",
        "-00000-1-",
        "-00-0011-",
        "-000-011-",
        "-0000-11-",
        "1---110-0",
        "1010001--",
        "0010101--",
        "-000-100-",
        "--000011-",
        "1--1-10-0",
        "0011001--",
        "1110000--",
        "1011000--",
        "0101001--",
        "0100101--",
        "1101000--",
        "1100100--",
        "0101100--",
        "1010010--",
        "0011010--",
        "0010110--",
        "11-1-1--0",
        "0101010--",
        "0100110--",
        "1101101--",
        "1011011--",
        "0111011--",
        "1010111--",
        "-1111---0",
        "1100111--",
        "0101111--",
        "-11-11--0",
        "1--111--0",
        "-00--0--1",
        "001--000-",
        "0001--00-",
        "011--010-",
        "001--110-",
        "01--0000-",
        "10--1010-",
        "11-0-010-",
        "011-1-01-",
        "01-0-110-",
        "0--01000-",
        "0--00100-",
        "1--10010-",
        "0--11010-",
        "-00-1110-",
        "1-101-01-",
        "1--00110-",
        "-0111-01-",
        "--010110-",
        "1--11001-",
        "-111--0-0",
        "--1111--0",
        "--000---1",
        "--0----11",
        "-11--10-0",
        "---1110-0",
        "-0-0-0--1",
        "----0--11",
        "1-----000",
        "------111",
        "0000001--"
    };
    
    // addition of 6 1 bit operands without carry in, without second carry out,
    // with constant = 0
    constexpr size_t ADD_61_C0_I0O1_SIZE = 85;
    constexpr const char* const ADD_61_C0_I0O1[ADD_61_C0_I0O1_SIZE] = {
        "111--100",
        "-0000011",
        "000000-1",
        "0-000011",
        "1111-1-0",
        "-0-10101",
        "000-0011",
        "0000-011",
        "1-1111-0",
        "11-1-100",
        "--111100",
        "11--1100",
        "-11111-0",
        "00000-11",
        "0-000-00",
        "000--000",
        "11-111-0",
        "0000--00",
        "0-00-110",
        "111-1-00",
        "0-101-01",
        "00-00011",
        "1-111-00",
        "1011001-",
        "11111--0",
        "01--1001",
        "1010101-",
        "-1111-00",
        "-00100-0",
        "1011010-",
        "0110101-",
        "-00010-0",
        "1010110-",
        "0--10010",
        "0111010-",
        "1110111-",
        "0-0010-0",
        "0110110-",
        "0110011-",
        "11-11-00",
        "0-011-01",
        "1101001-",
        "0011101-",
        "00-00-00",
        "0101000-",
        "1100101-",
        "--000110",
        "1000010-",
        "0011011-",
        "-00-1010",
        "-0-11111",
        "00-0-110",
        "0101101-",
        "1001110-",
        "1001011-",
        "0001010-",
        "1000111-",
        "000--110",
        "0101110-",
        "0101011-",
        "101--001",
        "111--011",
        "011--001",
        "11--0001",
        "--100101",
        "1--01001",
        "-01000-0",
        "1111--00",
        "1-01-001",
        "0011--01",
        "101--111",
        "0111--11",
        "1--11011",
        "1--00010",
        "01-000-0",
        "11--0111",
        "--000000",
        "0-1-1111",
        "-10-0101",
        "00-100-0",
        "--001101",
        "00-010-0",
        "-10-1111",
        "-0-00110",
        "1111110-"
    };
    
    // addition of 6 1 bit operands without carry in, without second carry out,
    // with constant = 1
    constexpr size_t ADD_61_C1_I0O1_SIZE = 86;
    constexpr const char* const ADD_61_C1_I0O1[ADD_61_C1_I0O1_SIZE] = {
        "-010-000",
        "0-01-000",
        "11111-00",
        "111111-0",
        "1-111100",
        "11-11100",
        "-1111100",
        "111-1100",
        "00--0011",
        "0-0-0011",
        "0--00011",
        "000-00-1",
        "-00000-1",
        "00-000-1",
        "0-0000-1",
        "111-0-01",
        "000-0-11",
        "1-1101-1",
        "-0000-11",
        "-11101-1",
        "-11011-1",
        "0-000-11",
        "1-0-1101",
        "00000--1",
        "1001001-",
        "1101101-",
        "1010001-",
        "1100001-",
        "1111-100",
        "000--011",
        "--000100",
        "-000-011",
        "1-111-11",
        "--111001",
        "0-00-011",
        "-1111-11",
        "0011111-",
        "1--11111",
        "111-1-11",
        "1010111-",
        "0101111-",
        "0000-0-1",
        "1-011-01",
        "0010011-",
        "1101011-",
        "1100111-",
        "1-101-01",
        "111-01-1",
        "0001110-",
        "-1101-01",
        "1001010-",
        "0010110-",
        "0000--11",
        "1010010-",
        "0101010-",
        "0100110-",
        "11--0101",
        "0110010-",
        "0-1010-0",
        "-01100-0",
        "1--01010",
        "01--1010",
        "-10100-0",
        "-11-0010",
        "-0-11010",
        "--001000",
        "001--000",
        "1--00000",
        "01--0000",
        "-001-000",
        "-00-1110",
        "0--01110",
        "1--00110",
        "01--0110",
        "-0-10110",
        "00--0100",
        "-000-100",
        "00-0-011",
        "1-110-01",
        "1111--11",
        "11-1-001",
        "-1011-01",
        "11-01-01",
        "0111--01",
        "-011-101",
        "0000001-"
    };
    
    typedef struct {
        const char * const * const map;
        const size_t map_size;
    } addition_map_entry_t;
    
    // 1st index - number of variables
    // 2nd index - constant bit
    // 3rd index - 1 if 2nd carry needed, 0 if not
    constexpr addition_map_entry_t ADD_MAP[7][2][2] = {
        { {{0, 0}, {0, 0}}, {{0, 0}, {0, 0}} }, // 0 variables
        { {{0, 0}, {0, 0}}, {{0, 0}, {0, 0}} }, // 1 variable
        {   // 2 variables
            {{ADD_21_C0_I0O2, ADD_21_C0_I0O2_SIZE}, {ADD_21_C0_I0O2, ADD_21_C0_I0O2_SIZE}}, // const 0
            {{ADD_21_C1_I0O2, ADD_21_C1_I0O2_SIZE}, {ADD_21_C1_I0O2, ADD_21_C1_I0O2_SIZE}}  // const 1
        },
        {   // 3 variables
            {{ADD_31_C0_I0O2, ADD_31_C0_I0O2_SIZE}, {ADD_31_C0_I0O2, ADD_31_C0_I0O2_SIZE}}, // const 0
            {{ADD_31_C1_I0O1, ADD_31_C1_I0O1_SIZE}, {ADD_31_C1_I0O2, ADD_31_C1_I0O2_SIZE}}  // const 1
        },
        {   // 4 variables
            {{ADD_41_C0_I0O1, ADD_41_C0_I0O1_SIZE}, {ADD_41_C0_I0O2, ADD_41_C0_I0O2_SIZE}}, // const 0
            {{ADD_41_C1_I0O1, ADD_41_C1_I0O1_SIZE}, {ADD_41_C1_I0O2, ADD_41_C1_I0O2_SIZE}}  // const 1
        },
        {   // 5 variables
            {{ADD_51_C0_I0O1, ADD_51_C0_I0O1_SIZE}, {ADD_51_C0_I0O2, ADD_51_C0_I0O2_SIZE}}, // const 0
            {{ADD_51_C1_I0O1, ADD_51_C1_I0O1_SIZE}, {ADD_51_C1_I0O2, ADD_51_C1_I0O2_SIZE}}  // const 1
        },
        {   // 6 variables
            {{ADD_61_C0_I0O1, ADD_61_C0_I0O1_SIZE}, {ADD_61_C0_I0O2, ADD_61_C0_I0O2_SIZE}}, // const 0
            {{ADD_61_C1_I0O1, ADD_61_C1_I0O1_SIZE}, {ADD_61_C1_I0O2, ADD_61_C1_I0O2_SIZE}}  // const 1
        }
    };
    
    // an additional tailored template for 3 variables + constant 1
    // which generates
    constexpr addition_map_entry_t ADD_31_C1_I0O2xC1_MAP = { ADD_31_C1_I0O2xC1, ADD_31_C1_I0O2xC1_SIZE };
};

#endif /* cnfaddmap_hpp */
